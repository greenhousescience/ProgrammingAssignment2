unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
?strptime
Sys.time()>1
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units='days')
$read.csv
?read.csv
read.csv(hw1.data.csv)
read.csv(Coursera/2.R/Week 1/hw1.data.csv)
read.csv(Coursera/2.R/Week1/hw1.data.csv)
read.csv(Coursera/2_R/Week_1/hw1_data.csv)
read.csv(hw1_data.csv)
?read.csv
read.csv(hw1_data.csv, header=TRUE)
read.csv(hw1_data.csv, header=TRUE, sep=",")
read.csv(hw1_data.csv, header=TRUE, sep=",")
data <- read.csv ("hw1_data.csv")
data <- read.csv ("hw1_data.csv")
data <- read.table("hw1_data.csv")
data <- read.table("hw1_data.csv")
data <- read.table("hwl_data.csv")
data <- read.table("c:/Temp/hwl_data.csv")
data <- read.table("C:/Temp/hwl_data.csv")
getwd()
cd..
data <- read.csv("hw1_data.csv")
data <- read.csv(file="hw1_data.csv", header=TRUE)
?read.csv
data <- read.csv('hw1_data.csv', header=TRUE, sep=",")
data <- read.csv('hw1_data.csv', header=TRUE, sep=",")
data <- read.csv(file.path("data","hw1_data.csv))
data
x <- matrix(1:6,2,3)
for(i in seq_len(ncol(x)) {}
for(i in seq_len(ncol(x)) {for(j in seq_len(ncol(x))){print(x[i,j])}}
for(i in seq_len(ncol(x)) for(j in seq_len(ncol(x))){print(x[i,j])}
for(i in seq_len(ncol(x)) for(j in seq_len(ncol(x)))print(x[i,j])
for(i in seq_len(ncol(x)) {for(j in seq_len(ncol(x))){print(x[i,j])}}
for(i in seq_len(ncol(x)) {for(j in seq_len(ncol(x))){print(x[i,j])}}
for(i in seq_len(nrow(x)) {for(j in seq_len(ncol(x))){print(x[i,j])}}
for(i in seq_len(ncol(x))) {for(j in seq_len(ncol(x))){print(x[i,j])}}
for(i in seq_len(nrow(x))) {for(j in seq_len(ncol(x))){print(x[i,j])}}
count <-0
while(count<10) { print(count) count <- count+1}
while(count<10) { print(count)
count <- count+1}
z<-5
while (z>=3 && z<= 10) {print(z)}
z<-5
while(z>=3 && z<=10) {
print(z)
coin <- rbinom(1,1,0.5)
if(coin ==1) {z<-z+1}
else {z<-z-1}
}
add2 <- function(x,y) {
x+y
}
add2
add2(4,5)
above <- function(x,n){
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n=10){
use <- x>n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}columnmean(airquality)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}columnmean(airquality)
columnmean(hw1_data.csv)
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
args(ln)
?ln
?ln()
?function
?function()
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
square(9)
ls(environment(cube))
get("n", environment(cube))
ls(environment(square))
get("n", environment(square))
y<-10
f<- function(x) {}
y<-2
y^2+g(x)
y<-10
f<- function(x) {
y<-2
y^2+g(x)
}
g<- function(x) {
x*y
}
f(3)
g<- function(x) {
a<-3
x+a+y
y<-3
}
g(2)
g(2)
corr <- function(directory, threshold = 0) {
source("complete.R")
complete_cases <- complete("specdata", 1:332)
files_list <- list.files(directory, full.names=TRUE)
data <- data.frame()
for (i in 1:332) {
if (complete_cases[i,2]>threshold){
temp <- read.csv(files_list[i])
noNAs <- na.omit(temp)
correlation <- cor(noNAs$sulfate, noNAs$nitrate)
data <- rbind(data, correlation)
}
}
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
sapply(x, mean)
x <- list(a=1:4, b=rnorm(10), c=rnorm(20, 1), d=rnorm(100,5))
lapply(x, mean)
sapply(x, mean)
x <- list(1:4)
lapply(x, runif)
[[1]]
lapply(x, runif)
x <- 1:4
lapply(x, runif, min=0, max=10)
x<- list(a=matrix(1:4, 2,2), b=matrix(1:6, 3,2))
x
lapply(x, function(elt) elt[,1])
sapply(x, function(elt) elt[,1])
library(datasets)
data(iris)
?iris
iris
mean <- mean(iris$Sepal.Lenth[101:150])
mean <- mean(iris$Sepal.Length[101:150])
mean
colMeans(iris)
iris
apply(iris[, 1:4], 2, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
colMeans(x)
rowSum(x)
rowSums(x)
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpf, cyl, mean))
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(hp, cyl, mean))
data <- with(mtcars, tapply(hp, cyl, mean))
data[,1]
data[1]
data[1]-data[3]
debug(ls)
ls
ls
mappl(rep,1:4,4:1)
mapply(rep,1:4,4:1)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5,1,2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
list(noise(1,1,2), noise(2,2,2), noise(3,3,2), noise(4,4,2), noise(5,5,2))
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
f
tapply(x,f, mean)
x<- c(rnorm(10), runif(10), rnorm(10,1)
)
f(gl(3,10))
f<-(gl(3,10))
split(x,f)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
lapply(split(airquality, month, mean))
lapply(split(airquality, month) mean)
s <- split(airquality, airquality$month)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")]))
sapply(x, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
x<- rnorm(10)
f1 <- gl(2,5)
f2 <_ g2(5,2)
f1
f2 <- g2(5,2)
f2 <_ g1(5,2)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x, list(f1,f2)))
str(split(x, list(f1,f2), drop=TRUE))
printmessage <- function(x) {
if(x>0> print ('x is greater than zero'))
}
printmessage <- function(x) {
if(x>0> print ('x is greater than zero'))
else print ('x is less than or equal to zero')
invisible(x)
}
printmessage2 <- function(x) {
if (is.na(x))
print ("x is a missing value!")
else if(x>0)
print ("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
printmessage2(x)
bivVec <- makeVector(1:1000)
makeVector <- function(x=numeric()) {
m <- NULL
get <- function()
setmeans <- function(mean)
getmeans <- function()
list(get=get, setmean=setmean, getmean=getmean)
cachemean <- function(x, ...)
m <- x$getmean()
if(!is.null(m)) {
message("Getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
bigBec <- makeVector(1:1000)
BigVec <- (1:1000)
BigVec$getmean()
## Put comments here that give an overall description of what your
## functions do
## This function takes a matrix, initializes a temporary cache and
## calculates the inverse of the matrix, which it stores in the cache.
makeMatrix <- function(x = matrix()) {
v <- NULL
get <- function() {x}
setInverse <- function() {v <<- solve(x)}
getInverse <- function() {v}
list (get=get, setInverse=setInverse, getInverse=getInverse)
## This function returns a matrix that is the inverse of 'x', but first
## verifies if the value has already been calculated and stored in the
## cache.
cacheSolve <- function(x, ...) {
If (!is.null(v)) { message("Getting cached data")
return(v)
}
data <- x$get {x}
v <<- setInverse(x)
}
## Put comments here that give an overall description of what your
## functions do
## This function takes a matrix, initializes a temporary cache and
## calculates the inverse of the matrix, which it stores in the cache.
makeMatrix <- function(x = matrix()) {
v <- NULL
get <- function() {x}
setInverse <- function() {v <<- solve(x)}
getInverse <- function() {v}
list (get=get, setInverse=setInverse, getInverse=getInverse)
## This function returns a matrix that is the inverse of 'x', but first
## verifies if the value has already been calculated and stored in the
## cache.
cacheSolve <- function(x, ...) {
If (!is.null(v))
message("Getting cached data")
return(v)
}
data <- x$get {x}
v <<- setInverse(x)
}
## Put comments here that give an overall description of what your
## functions do
## This function takes a matrix, initializes a temporary cache and
## calculates the inverse of the matrix, which it stores in the cache.
makeMatrix <- function(x = matrix()) {
v <- NULL
get <- function() {x}
setInverse <- function() {v <<- solve(x)}
getInverse <- function() {v}
list (get=get, setInverse=setInverse, getInverse=getInverse)
## This function returns a matrix that is the inverse of 'x', but first
## verifies if the value has already been calculated and stored in the
## cache.
cacheSolve <- function(x, ...) {
If (!is.null(v))
message("Getting cached data")
return(v)
}
data <- x$get ##{x}
v <<- setInverse(x)
}
makeMatrix(x=matrix(1:4,2,2))
## Put comments here that give an overall description of what your
## functions do
## This function, "makeVector", creates a special "vectpr", which
## is really a list containing a function to
## 1. set the value of the vector
##2. get the value of the vector
## 3. set the value of the inverse
##4. get the value of the inverse
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- function() x
setInverse <- function() v <<- solve(x)
getInverse <- function() v
list (set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This second function calculates the inverse of the special "vector"
## created with the above function. However, it first verifies if the
## inverse has already been calculated. If so, it "gets" the inverse
## from the cache and skips the computation. Otherwise, it calculates
## the inverse of the vector and sets its value in the cache via the
## "setInverse" function
cacheSolve <- function(x, ...) {
v <- x$getInverse()
If (!is.null(v)) {
message("Getting cached data")
return(v)
}
data <- x$get()
v <<- x$setInverse()
v
}
## Put comments here that give an overall description of what your
## functions do
## This function, "makeVector", creates a special "vectpr", which
## is really a list containing a function to
## 1. set the value of the vector
##2. get the value of the vector
## 3. set the value of the inverse
##4. get the value of the inverse
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- function() x
setInverse <- function() v <<- solve(x)
getInverse <- function() v
list (set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This second function calculates the inverse of the special "vector"
## created with the above function. However, it first verifies if the
## inverse has already been calculated. If so, it "gets" the inverse
## from the cache and skips the computation. Otherwise, it calculates
## the inverse of the vector and sets its value in the cache via the
## "setInverse" function
cacheSolve <- function(x, ...) {
v <- x$getInverse()
If (!is.null(v))
message("Getting cached data")
return(v)
data <- x$get()
v <<- x$setInverse()
v
}
x <- numeric(1:4,2,2)
x<- matrix(1:4,2,2)
cacheSolve(x)
solve(x)
?numeric
x(1:4)
x<-c(1:4)
x<-numeric(1:4)
cacheSolve(x)
## This function, "makeVector", creates a special "vectpr", which
## is really a list containing a function to
## 1. set the value of the vector
##2. get the value of the vector
## 3. set the value of the inverse
##4. get the value of the inverse
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- function() x
setInverse <- function() v <<- solve(x)
getInverse <- function() v
list (set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This second function calculates the inverse of the special "vector"
## created with the above function. However, it first verifies if the
## inverse has already been calculated. If so, it "gets" the inverse
## from the cache and skips the computation. Otherwise, it calculates
## the inverse of the vector and sets its value in the cache via the
## "setInverse" function
cacheSolve <- function(x, ...) {
v <- x$getInverse()
If (!is.null(v))
message("Getting cached data")
return(v)
data <- x$get()
v <<- x$setInverse()
v
}
bv <- makeVector(1:10)
cacheSolve(bv)
## This function, "makeVector", creates a special "vectpr", which
## is really a list containing a function to
## 1. set the value of the vector
##2. get the value of the vector
## 3. set the value of the inverse
##4. get the value of the inverse
makeVector <- function(x = numeric()) {
v <- NULL
set <- function(y) {
x <<- y
v <<- NULL
}
get <- function() x
setInverse <- function() v <<- solve(x)
getInverse <- function() v
list (set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This second function calculates the inverse of the special "vector"
## created with the above function. However, it first verifies if the
## inverse has already been calculated. If so, it "gets" the inverse
## from the cache and skips the computation. Otherwise, it calculates
## the inverse of the vector and sets its value in the cache via the
## "setInverse" function
cacheSolve <- function(x, ...) {
v <- x$getInverse()
If (!is.null(v))
message("Getting cached data")
return(v)
data <- x$get()
v <<- x$setInverse()
v
}
cacheSolve(bv)
v<- NULL
cacheSolve(bv)
getwd()
setwd(c:/Users/ÈVe/ProgrammingAssignment2)
setwd("C:/Users/ÈVe/ProgrammingAssignment2")
spirce(Ècachmatrix.r")
source("cachmatrix.r")
source("cachematrix.R")
v1 <-makeVector(1:10)
cachSolve(v1)
cacheSolve(v1)
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
cacheSolve(v1)
